---
# ---------- Create directory for jupyterhub ----------
- name: Create directory for jupyterhub
  file:
    path: /usr/local/share/dodasts/jupyterhub
    state: directory
    mode: 0755

- name: Create directory for jupyterhub cookies
  file:
    path: /usr/local/share/dodasts/jupyterhub/cookies
    state: directory
    mode: 0755

- name: Create directory for jupyterhub db
  file:
    path: /usr/local/share/dodasts/jupyterhub/db
    state: directory
    mode: 0755

- name: Create directory for jupyter mounts
  file:
    path: /jupyter-mounts
    state: directory
    mode: 0755

- name: Create directory for jupyter collaborative
  file:
    path: /jupyter-mounts/collaborativefolder/
    state: directory
    mode: 0755

- name: Create directory for jupyter users
  file:
    path: /jupyter-mounts/users/
    state: directory
    mode: 0755

- name: Create directory for jupyter shared
  file:
    path: /jupyter-mounts/shared/
    state: directory
    mode: 0755

- name: create JUPYTERHUB_CRYPT_KEY
  shell: openssl rand -hex 32
  register: jupyterhub_crypt_key

- name: set JUPYTER_COLLAB_SERVICE
  set_fact:
    key_value: "yes"
    jupyter_collab_service: true
  when: (jupyterlab_collaborative | bool)

- name: create JUPYTERHUB_API_TOKEN
  shell: openssl rand -hex 32
  register: jupyterhub_api_token

- name: create JUPYTER_TOKEN
  shell: openssl rand -hex 32
  register: jupyter_token
  when: (jupyterlab_collaborative | bool)

- name: create jupyterhub proxy token
  shell: openssl rand -hex 32
  register: generated_jupyter_proxy_token
  when: (jupyter_proxy_token|length == 0)

- name: change default jupyterlab collaborative image
  set_fact:
    key_value: "yes"
    jupyterlab_collaborative_image_param: "image: {{ jupyterlab_collaborative_image }}"
  when: ((jupyterlab_collaborative | bool ) and (jupyterlab_collaborative_image|length > 0))

- name: add jupyter_proxy_token
  set_fact:
    key_value: "yes"
    jupyter_proxy_token: "{{ generated_jupyter_proxy_token.stdout | string }}"
  when: (jupyter_proxy_token|length == 0)

# compose gpu support: https://docs.docker.com/compose/gpu-support/
# deploy:
#   resources:
#     reservations:
#       devices:
#       - driver: nvidia
#         count: 1
#         capabilities: [gpu, utility]
- name: add jupyterlab collaborative gpu
  set_fact:
    key_value: "yes"
    jupyterlab_collaborative_gpu_param: |
      deploy:
            resources:
              reservations:
                devices:
                  - capabilities: [ gpu ]
  when: ((jupyterlab_collaborative | bool ) and (jupyterlab_collaborative_use_gpu | bool))

- name: prepare collaborative jupyterlab
  set_fact:
    key_value: "yes"
    jupyterlab_collaborative_service: |
      collab_proxy:
          depends_on:
            - jupyterlab_collab
          image: {{ compose_base_collab_http_proxy_image }}
          restart: unless-stopped
          environment:
            - HOST_IP={{ dns_name }}
            - JUPYTERHUB_BASE_URL=http://jupyterhub:8088
            - JUPYTERHUB_API_URL=http://jupyterhub:8088/hub/api
            - JUPYTERHUB_SERVICE_PREFIX=/services/Collaborative-Jupyter/
            - JUPYTERHUB_API_TOKEN={{ jupyterhub_api_token.stdout | string }}
            - JUPYTER_TOKEN={{ jupyter_token.stdout | string }}
          ports:
            - 8099:8099

        jupyterlab_collab:
          {{ jupyterlab_collaborative_image_param }}
          {{ jupyterlab_collaborative_gpu_param }}
          restart: unless-stopped

          volumes:
              - /usr/local/share/dodasts/certs/jupyter:/usr/local/share/dodasts/certs/jupyter
              - /jupyter-mounts/collaborativefolder/:/jupyter-workspace/collaborativefolder
          environment:
              - JUPYTER_TOKEN={{ jupyter_token.stdout | string }}
              - JUPYTERHUB_API_TOKEN={{ jupyterhub_api_token.stdout | string }}
          ports:
            - 8889:8888
  when: (jupyterlab_collaborative | bool)

- name: add jupyterlab collaborative dependency
  set_fact:
    key_value: "yes"
    jupyterlab_collaborative_service_dependency: "- collab_proxy"
  when: (jupyterlab_collaborative | bool)

- name: ram size
  debug:
    var: ansible_facts.memtotal_mb

- name: create ram giga var
  set_fact:
    key_value: "yes"
    ram_giga: "{{ ((ansible_facts.memtotal_mb|int) / 1000)| round | int }}"

- name: create ram list
  set_fact:
    key_value: "yes"
    list_ram_sizes: "{{ [1] + range(2, (ram_giga|int) + 1, 2) | list }}"

- name: result ram list
  debug:
    var: list_ram_sizes

- name: create ram list string
  set_fact:
    key_value: "yes"
    list_ram_size: "{{ list_ram_sizes | product(['G']) | map('join', '') | list | join(',') }}"

- name: "prepare variables for jupyter"
  set_fact:
    key_value: "yes"
    jupyter_gpu: "WITH_GPU=true"
    cacheable: yes
  when: (jupyter_use_gpu | bool)

- block:
  - name: Retrieve registration endpoint from OpenID configuration
    uri:
      url: "{{ iam_url }}/.well-known/openid-configuration"
      method: GET
      return_content: yes
    register: openid_config
  - name: Set registration endpoint variable
    set_fact:
      registration_endpoint: "{{ openid_config.json.registration_endpoint }}"

  - name: Collect the IAM client info
    uri:
      url: "{{ registration_endpoint }}/{{ iam_client_id }}"
      method: GET
      headers:
        Authorization: "Bearer {{ iam_token }}"
      status_code: 200
      return_content: yes
    register: iam_client_get_response

  - name: Save the IAM Client info locally
    ansible.builtin.copy:
      content: "{{ iam_client_get_response.json | to_nice_json }}"
      dest: /usr/local/share/dodasts/jupyterhub/cookies/.client-iam.json

  - name: Define the new redirect_uri variable
    ansible.builtin.set_fact:
      redirect_uri: "https://{{ dns_name }}:{{ jupyter_port }}/hub/oauth_callback"

  - name: Import the local IAM Client info file
    ansible.builtin.set_fact:
      iam_client_info: "{{ lookup('file', '/usr/local/share/dodasts/jupyterhub/cookies/.client-iam.json') }}"

  - name: Update the redirect_uris field
    ansible.builtin.set_fact:
      updated_iam_client_info: "{{ iam_client_info | combine({'redirect_uris': [redirect_uri]}) }}"

  - name: Save the updated IAM Client info locally
    ansible.builtin.copy:
      content: "{{ updated_iam_client_info | to_json }}"
      dest: /tmp/updated-iam-client.json

  - name: Import the local updated IAM Client info file
    ansible.builtin.slurp:
      src: /tmp/updated-iam-client.json
    register: iam_client_file

  - name: Update the IAM client info remotely
    uri:
      url: "{{ registration_endpoint }}/{{ iam_client_id }}"
      method: PUT
      headers:
        Authorization: "Bearer {{ iam_token }}"
        Content-Type: application/json
      body_format: json
      body: "{{ iam_client_file.content | b64decode | from_json }}"
      status_code: 200
    register: iam_response

  - name: Delete local IAM Client info file
    ansible.builtin.file:
      path: /tmp/updated-iam-client.json
      state: absent

# ---------- Collect MIG GPU UUIDs from nvidia-smi ----------
- name: Collect MIG GPU UUIDs
  shell:
    cmd: nvidia-smi -L | grep MIG | awk '{print $6}' | cut -d')' -f1 | paste -s -d, -
  register: reg_gpu_uuid
  when: ((gpu_partition_flavor != "None" ) and (jupyter_use_gpu | bool))

- name: "prepare ALL_GPU_UUIDs env var for jupyterhub"
  set_fact:
    key_value: "yes"
    jupyterhub_all_gpu_uuids: "ALL_GPU_UUIDs={{ reg_gpu_uuid.stdout | string }}"
    cacheable: yes
  when: ((gpu_partition_flavor != "None" ) and (jupyter_use_gpu | bool))

# ---------- JupyterHub config editing to support partitioned GPUs ----------
- name: Edit JupyterHub config file
  include_tasks: jupyterhub-partitioned-gpus.yml
  when: ((gpu_partition_flavor != "None") and (jupyter_use_gpu | bool))

# ---------- Prepare Compose File ----------
- name: prepare compose file
  template:
    src: jupyter_hub-compose.j2
    dest: /usr/local/share/dodasts/jupyterhub/compose.yaml
  vars:
    iam_client_id: "{{ iam_response.json.client_id }}"
    iam_client_secret: "{{ iam_response.json.client_secret }}"
  when: cert_manager_type != "self-signed"
- name: prepare compose file (private network)
  template:
    src: jupyter_hub_priv-compose.j2
    dest: /usr/local/share/dodasts/jupyterhub/compose.yaml
  vars:
    iam_client_id: "{{ iam_response.json.client_id }}"
    iam_client_secret: "{{ iam_response.json.client_secret }}"
  when: cert_manager_type == "self-signed"

# finally pre-cache default images
- name: pull images
  command: docker pull "{{ item }}"
  with_items: "{{ jupyter_images.split() + [ jupyterlab_collaborative_image, compose_base_jhub_image, compose_base_http_proxy_image, compose_base_collab_http_proxy_image ] }}"
  async: 1800 # 30 min
  poll: 0

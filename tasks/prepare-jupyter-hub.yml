---
- name: download jupyterhub
  shell: rm -rf /usr/local/share/dodasts/jupyterhub && \
    git clone {{ jupyter_repo_url }} /usr/local/share/dodasts/jupyterhub
  when: (not (jupyterlab_collaborative | bool))

- name: "download jupyterhub + collaborative service"
  shell: rm -rf /usr/local/share/dodasts/jupyterhub && \
    git clone -b collaborative {{ jupyter_repo_url }} /usr/local/share/dodasts/jupyterhub
  when: (jupyterlab_collaborative | bool)

- name: create JUPYTERHUB_API_TOKEN
  shell: openssl rand -hex 32
  register: jupyterhub_api_token
  when: (jupyterlab_collaborative | bool)

- name: create JUPYTER_TOKEN
  shell: openssl rand -hex 32
  register: jupyter_token
  when: (jupyterlab_collaborative | bool)

- name: "Write token in config"
  replace:
    path: /usr/local/share/dodasts/jupyterhub/jupyterhub_config.py
    regexp: "API_TOKEN_EXAMPLE"
    replace: "{{ jupyterhub_api_token.stdout | string }}"
  when: (jupyterlab_collaborative | bool)

- name: add jupyterlab collaborative dependency
  set_fact:
    key_value: "yes"
    jupyterlab_collaborative_image_param: "image: {{ jupyterlab_collaborative_image }}"
  when: ((jupyterlab_collaborative | bool ) and jupyterlab_collaborative_image != "")

- name: add jupyterlab collaborative gpu
  set_fact:
    key_value: "yes"
    jupyterlab_collaborative_gpu_param: |
      deploy:
          resources:
            reservations:
              devices:
                - capabilities: [ gpu ]
  when: ((jupyterlab_collaborative | bool ) and (jupyterlab_collaborative_use_gpu | bool))

- name: prepare collaborative jupyterlab
  set_fact:
    key_value: "yes"
    jupyterlab_collaborative_service: |
      collab_proxy:
          build: collab_proxy
          environment:
            - HOST_IP={{ server_ip }}
            - JUPYTERHUB_BASE_URL=http://jupyterhub:8088
            - JUPYTERHUB_API_URL=http://jupyterhub:8088/hub/api
            - JUPYTERHUB_SERVICE_PREFIX=/services/Collaborative-Jupyter/
            - JUPYTERHUB_API_TOKEN={{jupyterhub_api_token.stdout | string}}
            - JUPYTER_TOKEN={{ jupyter_token.stdout | string }}
          ports:
            - 8099:8099

        jupyterlab_collab:
          {{ jupyterlab_collaborative_image_param }}
          {{ jupyterlab_collaborative_gpu_param }}
          volumes:
              - /usr/local/share/certs/jupyter:/usr/local/share/certs/jupyter
              - /usr/local/share/collabspace/:/usr/share/workspace
          environment:
              - JUPYTER_TOKEN={{ jupyter_token.stdout | string }}
          ports:
            - 8889:8888
  when: (jupyterlab_collaborative | bool)

- name: prepare backup of collabspace folders
  set_fact:
    key_value: "yes"
    jupyterhub_backup_service: |
      backup_service:
          build: backup_service
          volumes:
            - /usr/local/share/collabspace:/source
            - /usr/local/share/collabspace/backup:/var/cache/rsnapshot
  when: (jupyterlab_collaborative_backup_folders | bool) and (jupyterlab_collaborative | bool)
  tags:
    - hackaton
    - ml-infn

- name: add jupyterlab collaborative dependency
  set_fact:
    key_value: "yes"
    jupyterlab_collaborative_service_dependency: "- collab_proxy"
  when: (jupyterlab_collaborative | bool)

- name: "change token in jupyterhub"
  replace:
    path: /usr/local/share/dodasts/jupyterhub/jupyterhub_config.py
    regexp: 'c\.ConfigurableHTTPProxy\.auth_token[a-zA-Z\ \=\"\_]*'
    replace: 'c.ConfigurableHTTPProxy.auth_token = "{{ jupyter_proxy_token }}"'

- name: "change image in jupyterhub"
  replace:
    path: /usr/local/share/dodasts/jupyterhub/jupyterhub_config.py
    regexp: '\<datalist\ id\=\"images\"\>[\n\t\ \<\>\=\"\/\_\:\-0-9a-zA-Z]*<\/datalist\>'
    replace: |
      <datalist id="images">
      {{ jupyter_images.split() | join('\n') }}
      </datalist>

- name: "insert image list"
  lineinfile:
    path: /usr/local/share/dodasts/jupyterhub/jupyterhub_config.py
    regexp: "{{ item }}"
    line: <option value="{{ item }}">{{ item|upper }}</option>
  with_items: "{{ jupyter_images.split() }}"

#- name: ram size
#  debug:
#    var: ansible_facts.memtotal_mb

#- name: create ram giga var
#  set_fact:
#    key_value: "yes"
#    ram_giga: "{{ ((ansible_facts.memtotal_mb|int) / 1000)| round | int }}"

#- name: create ram list
#  set_fact:
#    key_value: "yes"
#    list_ram_sizes: "{{ [1] + range(2, (ram_giga|int) + 1, 2) | list }}"

#- name: result ram list
#  debug:
#    var: list_ram_sizes

#- name: create ram list placeholders
#  set_fact:
#    key_value: "yes"
#    list_ram_size_placeholders: "{{ list_ram_sizes | product(['G']) | map('join', '') | list }}"

#- name: ram list placeholders
#  debug:
#    var: list_ram_size_placeholders
#
#- name: "change ram size in jupyterhub"
#  replace:
#    path: /usr/local/share/dodasts/jupyterhub/jupyterhub_config.py
#    regexp: '\<\!\-\-\ MEM\ START\ \-\-\>[\n\t\ \<\>\=\"\/\_\:\-0-9a-zA-Z]*\<\!\-\-\ MEM\ END\ \-\-\>'
#    replace: |
#      <!-- MEM START -->
#      <select name="mem" size="1">
#        {{ ['ram-size-'] | product(list_ram_size_placeholders) | map('join', '') | join('\n') }}
#      </select>
#      <!-- MEM END -->

#- name: "insert ram size list"
#  lineinfile:
#    path: /usr/local/share/dodasts/jupyterhub/jupyterhub_config.py
#    regexp: "ram-size-{{ item }}"
#    line: <option value="{{ item }}">{{ item }}B</option>
#  with_items: "{{ list_ram_size_placeholders }}"

# ---------- Create directory for jupyterhub ----------
- name: Create directory for jupyterhub
  file:
    path: /usr/local/share/dodasts/jupyterhub
    state: directory
    mode: 0755

- name: Create directory for jupyterhub cookies
  file:
    path: /usr/local/share/dodasts/jupyterhub/cookies
    state: directory
    mode: 0755

- name: Create directory for jupyterhub db
  file:
    path: /usr/local/share/dodasts/jupyterhub/db
    state: directory
    mode: 0755

- name: Create directory for jupyterhub users
  file:
    path: /jupyter-users
    state: directory
    mode: 0755
  tags:
    - hackaton
    - ml-infn

- name: Create directory for jupyterhub shared
  file:
    path: /jupyter-users/shared
    state: directory
    mode: 0755
  tags:
    - hackaton
    - ml-infn

- name: Create directory for jupyterhub backup
  file:
    path: /jupyter-users/shared/backup
    state: directory
    mode: 0755
  tags:
    - hackaton
    - ml-infn

- name: Create directory for jupyterhub collabspace
  file:
    path: /usr/local/share/collabspace
    state: directory
    mode: 0755
  tags:
    - hackaton
    - ml-infn

- name: Install subversion
  apt:
    name: subversion
    state: present
    autoclean: yes
    autoremove: yes
    update_cache: yes
  tags:
    - hackaton
    - ml-infn

- name: Prepare shared backup
  command: svn checkout https://github.com/tommasoboccali/ml_infn_hackBase/trunk/VM_BACKUP
  args:
    chdir: /jupyter-users/Backup
  tags:
    - hackaton
    - ml-infn

- name: Prepare collabspace
  command: svn checkout https://github.com/tommasoboccali/ml_infn_hackBase/trunk/VM_COLLABSHARED
  args:
    chdir: /usr/local/share/collabspace
  tags:
    - hackaton
    - ml-infn

#- name: "prepare variables for jupyter"
#  set_fact:
#    key_value: "yes"
#    jupyter_gpu: "WITH_GPU=true"
#  when: (use_gpu | bool)

- name: prepare compose file
  template:
    src: jupyter_hub-compose.j2
    dest: /usr/local/share/dodasts/jupyterhub/docker-compose.yaml

# finally pre-cache default images
- name: pull images
  command: docker pull "{{ item }}"
  with_items: "{{ jupyter_images.split() }}"

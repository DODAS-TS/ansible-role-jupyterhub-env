---
- name: download jupyterhub
  git:
    repo: "{{jupyter_repo_url}}"
    dest: /usr/local/share/dodasts/jupyterhub
    force: yes

- name: "change token in jupyterhub"
  replace:
    path: /usr/local/share/dodasts/jupyterhub/jupyterhub_config.py
    regexp: 'c\.ConfigurableHTTPProxy\.auth_token[a-zA-Z\ \=\"\_]*'
    replace: 'c.ConfigurableHTTPProxy.auth_token = "{{jupyter_proxy_token}}"'

- name: "change image in jupyterhub"
  replace:
    path: /usr/local/share/dodasts/jupyterhub/jupyterhub_config.py
    regexp: '\<datalist\ id\=\"images\"\>[\n\t\ \<\>\=\"\/\_\:\-0-9a-zA-Z]*<\/datalist\>'
    replace: |
      <datalist id="images">
      {{ jupyter_images.split() | join('\n') }}
      </datalist>

- name: "insert image list"
  lineinfile:
    path: /usr/local/share/dodasts/jupyterhub/jupyterhub_config.py
    regexp: "{{ item }}"
    line: <option value="{{ item }}">{{ item|upper}}</option>
  with_items: "{{ jupyter_images.split() }}"

- name: ram size
  debug:
    var: ansible_facts.memtotal_mb

- name: create ram giga var
  set_fact:
    key_value: "yes"
    cacheable: yes
    ram_giga: "{{ ((ansible_facts.memtotal_mb|int) / 1000)|int }}"

- name: create ram list
  set_fact:
    key_value: "yes"
    cacheable: yes
    list_ram_sizes: "{{ [1] + range(2, (ram_giga|int) + 1, 2) | list }}"

- name: result ram list
  debug:
    var: list_ram_sizes

- name: create ram list placeholders
  set_fact:
    key_value: "yes"
    cacheable: yes
    list_ram_size_placeholders: "{{ list_ram_sizes | product(['G']) | map('join', '') | list }}"

- name: ram list placeholders
  debug:
    var: list_ram_size_placeholders

- name: "change ram size in jupyterhub"
  replace:
    path: /usr/local/share/dodasts/jupyterhub/jupyterhub_config.py
    regexp: '\<\!\-\-\ MEM\ START\ \-\-\>[\n\t\ \<\>\=\"\/\_\:\-0-9a-zA-Z]*\<\!\-\-\ MEM\ END\ \-\-\>'
    replace: |
      <!-- MEM START -->
      <select name="mem" size="1">
        {{ ['ram-size-'] | product(list_ram_size_placeholders) | map('join', '') | join('\n') }}
      </select>
      <!-- MEM END -->

- name: "insert ram size list"
  lineinfile:
    path: /usr/local/share/dodasts/jupyterhub/jupyterhub_config.py
    regexp: "ram-size-{{ item }}"
    line: <option value="{{ item }}">{{ item }}B</option>
  with_items: "{{ list_ram_size_placeholders }}"

# ---------- Create directory for jupyterhub ----------
- name: Create directory for jupyterhub
  file:
    path: /usr/local/share/dodasts/jupyterhub
    state: directory
    mode: 0755

- name: Create directory for jupyterhub cookies
  file:
    path: /usr/local/share/dodasts/jupyterhub/cookies
    state: directory
    mode: 0755

- name: Create directory for jupyterhub db
  file:
    path: /usr/local/share/dodasts/jupyterhub/db
    state: directory
    mode: 0755

- name: "prepare variables for jupyter"
  set_fact:
    key_value: "yes"
    jupyter_gpu: "WITH_GPU=true"
    cacheable: yes
  when: (use_gpu | bool)
  
- name: modify option
  lineinfile:
    path: /usr/local/share/dodasts/jupyterhub/jupyterhub_config.py
    state: absent
    regexp: '<option value="Y">Yes</option>'
    line: '<option value="N">Not Available</option>'
  when: (use_gpu|bool == False)
  
- name: Delete option for GPU
  lineinfile:
    path: /usr/local/share/dodasts/jupyterhub/jupyterhub_config.py
    state: absent
    regexp: '<option value="N"> No </option>'
  when: (use_gpu|bool == False)

- name: prepare compose file
  template:
    src: jupyter_hub-compose.j2
    dest: /usr/local/share/dodasts/jupyterhub/docker-compose.yaml

# finally pre-cache default images
- name: pull images
  command: docker pull "{{ item }}"
  with_items: "{{ jupyter_images.split() }}"
